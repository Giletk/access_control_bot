import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, types
from aiogram.exceptions import TelegramAPIError
from aiogram.filters import Command
from dotenv import load_dotenv

from database import create_tables, get_allowed_usernames, get_current_usernames
from handlers import router as main_router

load_dotenv()
API_TOKEN = os.getenv('bot_token')

CHECK_INTERVAL = 12  # –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

file_log = logging.FileHandler("bot.log")
stdout_log = logging.StreamHandler()
logging.basicConfig(
    handlers=(file_log, stdout_log),
    level=logging.DEBUG,
    format=' %(asctime)s:%(name)s:%(funcName)s:%(levelname)s:%(message)s',
    encoding="utf-8")
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
dp.include_router(main_router)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
ALLOWED_USERNAMES = []


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def load_allowed_usernames():
    global ALLOWED_USERNAMES
    ALLOWED_USERNAMES = await get_allowed_usernames()


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ
async def check_users_in_chat(chat_id: int, admin: types.User):
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã —Å id={chat_id}")
    try:
        members = await get_current_usernames()
        for member in members:
            if member not in ALLOWED_USERNAMES:
                await bot.send_message(admin.id,
                                       f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member.user.full_name} (@{member.user.username})"
                                       f" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö.")
                logger.info(f"–û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω @{admin.username}")
    except TelegramAPIError as e:
        logger.error(f"Error checking chat members in chat {chat_id}: {e}")


# –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
async def periodic_check(chat_id: int, admin: types.User):
    logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–ª—è –≥—Ä—É–ø–ø—ã id={chat_id}. –û—Ç—á—ë—Ç—ã –Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç—Å—è @{admin.username}")
    while True:
        await check_users_in_chat(chat_id, admin)
        await asyncio.sleep(CHECK_INTERVAL)


@dp.message(Command("dice"))
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    logger.info(f"–ø–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {message.text}")
    chat_type = message.chat.type  # –û–ø—Ä–µ–¥–µ–ª–∏–º —Ç–∏–ø —á–∞—Ç–∞: –õ–° –∏–ª–∏ –≥—Ä—É–ø–ø–∞
    bot_info = await bot.get_me()
    logger.debug(f"Bot info: {bot_info}")
    logger.debug(f"Chat type: {chat_type}")
    if chat_type == "private":
        await message.answer(f"–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –Ω–µ–π –∫–æ–º–∞–Ω–¥—É:\n/start @{bot_info.username}\n\n"
                             f"–û—Ç—á—ë—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫ –±—É–¥—É—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –∑–∞–ø—É—Å—Ç–∏–≤—à–µ–º—É –±–æ—Ç–∞.")
    else:
        # –í –≥—Ä—É–ø–ø–µ –±–æ—Ç –±—É–¥–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã —Å –µ–≥–æ –Ω–∏–∫–Ω–µ–π–º–æ–º —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
        args = message.text.split()
        logger.debug(f"Command args: {args}")
        # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±–æ—Ç—É, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ –±–æ—Ç–∞–º–∏ –≥—Ä—É–ø–ø—ã
        if len(args) < 2:
            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
            return
        if args[1].lstrip('@') != bot_info.username:
            logger.warning(f"–í—ã–∑–æ–≤ –±–µ–∑ –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±–æ—Ç—É –≤ –≥—Ä—É–ø–ø–µ")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∫—É –±–æ—Ç–∞, –ø—ã—Ç–∞—è—Å—å –¥–æ—Å—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ –≥—Ä—É–ø–ø—ã. –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∫–∏ –Ω–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–π–¥–µ—Ç
        bot_is_admin = await bot.get_chat_member(message.chat.id, bot.id)
        logger.debug(f"Group chat_id: {message.chat.id}")
        if bot_is_admin:
            sender = await bot.get_chat_member(message.chat.id, message.from_user.id)
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã: @{message.from_user.username}")
            if not isinstance(sender, types.ChatMemberOwner) and not isinstance(sender, types.ChatMemberAdministrator):
                await message.reply("–ë–æ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã")
                logger.debug("Non-admin tried to start the bot inside a group")
            else:
                await message.reply(
                    f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL // 60} –º–∏–Ω—É—Ç.\n\n"
                    f"–û—Ç—á—ë—Ç—ã –±—É–¥–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã @{message.from_user.username}")
                logger.debug("Successful group /start")
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                asyncio.create_task(periodic_check(message.chat.id, message.from_user))
        else:
            await message.reply(f"–ë–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞.\n"
                                f"–í—ã–¥–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start @{bot_info.username}")
            logger.debug("Bot has no admin privileges")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ /check
@dp.message(Command("check"))
async def manual_check(message: types.Message):
    logger.debug("Manual check launched")
    await check_users_in_chat(message.chat.id, message.from_user)
    await message.reply("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


# @dp.message()
# async def all_messages_handler(message: types.Message):
#     logger.info(f"Unhandled message: {message}")
#
#
# @dp.chat_member()
# async def all_chat_member_updates_handler(event: ChatMemberUpdated):
#     logger.info(f"Unhandled chat member update: {event}")


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    await create_tables()
    await load_allowed_usernames()
    await dp.start_polling(bot,
                           allowed_updates=["message", "chat_member"])
    logger.info("Tables created and bot started.")


if __name__ == "__main__":
    asyncio.run(main())
